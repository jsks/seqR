% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{findMovement}
\alias{findMovement}
\title{Find subsequences based on movement}
\usage{
findMovement(v, direction = "up", buffer = 0L, lbuffer = NULL,
  rbuffer = NULL, upper_lim = NULL, lower_lim = NULL)
}
\arguments{
\item{v}{A numeric vector.}

\item{direction}{Character string of either "up" to find
increasing sequences or "down" to find decreasing
sequences. Default: "up".}

\item{buffer}{Optional parameter indicating how many repeated
elements to include to the left (prior to the start) and
right (following the end) of a subsequence.}

\item{lbuffer}{Optional parameter indicating how many repeated
elements to include to the left (prior to the start) of a
subsequence. Takes precedence over the option
\code{buffer}.}

\item{rbuffer}{Optional parameter indicating how many repeated
elements to include to the right (following the end) of a
subsequence. Takes precedence over the option
\code{buffer}.}

\item{upper_lim}{Optional parameter that filters out
subsequences which do not reach an upper lim.}

\item{lower_lim}{Optional parameter that filters out
subsequences which do not begin below a given lim.}
}
\value{
A numeric vector of the same length as \code{v} where
subsequences are given values 1:N and elements falling
outside of subsequences are set to \code{NA}.
}
\description{
Given a sequence of numbers, as a numeric vector, find the
increasing or decreasing subsequences.
}
\details{
\code{findMovement} finds the subsequences within a
numeric vector based on either increasing or decreasing
movement. An increasing subsequence is defined as a
sequence of values where \code{V[n] >= V[n - 1]}. The
start point is strict, meaning the first point where \code{V[n] < V[n + 1]}. The option \code{lbuffer} can be specified to
include an arbitrary number, \code{k}, of constant
elements prior to \code{V[n]} where \code{V[n - k] == V[n]}. Likewise, the end point of a subsequence is the
element where \code{V[n] > V[n + 1]} or \code{V[n + 1]} is
NA. \code{rbuffer} will also include a constant number
of elements after the end point. Alternatively, the
option \code{buffer} can be used to specify equal
buffering at both the start and end of subsequences.
}
\examples{
x <- c(4, 4, 3, 1, 0, 1, 0, 1, 2, 2, 2, 3, 3)
findMovement(x)
findMovement(x, direction = "down")

# Let's find buffered subsequences that increase starting at 2
findMovement(x, buffer = 1, lower_lim = 2)

}
